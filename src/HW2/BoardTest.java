package HW2;

import org.junit.Assert;
import org.junit.jupiter.api.Test;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

class BoardTest {
    String [][] testBoard = new String[][]{
            {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
            {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
            {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
            {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
            {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
            {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
            {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
            {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
            {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
            {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
            {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
            {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
            {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
            {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
            {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." }
    };

    @Test
    void populateBoard() {

        Board board = new Board(15);

        assertTrue(Arrays.deepEquals(testBoard, board.populateBoard()));

        //The following code is, so I don't have to type the emptyPopulatedBoard Arr
//        System.out.println("{");
//        for (String [] p : shouldBe) {
//            System.out.print("{");
//            for (String l : p) {
//                System.out.print("\"" + l + "\"" + ", ");
//            }
//            System.out.println("},");
//        }
//        System.out.println("}");

    }

    @Test
    void hasSomeoneWon() {
        String [][] boardShouldHaveWiner = new String[][]{
                {"O", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"O", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"O", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"O", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"O", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." }
        };
        String [][] notWonYet = new String[][]{
                {"O", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"O", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"O", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." }
        };
        assertFalse(Board.hasSomeoneWon(notWonYet));
        String [][] otherCases = new String[][]{
                {"O", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"O", "X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"X", ".", "X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"O", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", "X", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", "X", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", "X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", "X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", "X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." }
        };
        assertTrue(Board.hasSomeoneWon(otherCases));

    }

    @Test
    void printBoard() {
        String [][] testBoard = new String[][]{
                {"O", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"O", "X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"X", ".", "X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"O", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", ".", "X", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", ".", "X", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", ".", "X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", ".", "X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {".", "X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." },
                {"X", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "." }
        };

        String [][] copy = new String [15][15];
        String [][] decoy = new String [15][15];
        for(int i = 0; i < testBoard.length; i++){
            System.arraycopy(testBoard[i], 0, copy[i], 0, testBoard.length);
        }
        Board.printBoard(testBoard);
        //Not really sure how to test void methods
        //If they look the same then is true
        //What I will check tho is that it does not alter the original string [][] array
        assertTrue(Arrays.deepEquals(testBoard, copy));
        assertFalse(Arrays.deepEquals(testBoard, decoy));
    }

    @Test
    void placeStone() {
        Board board = new Board(15);
        int [] possiblePlayerMove = new int[3];
        possiblePlayerMove[0] = 2;
        possiblePlayerMove[1] = 1;

        int [] possibleOppsMove = new int[3];
        possibleOppsMove[0] = 4;
        possibleOppsMove[1] = 7;

        board.placeStone(possiblePlayerMove, "X", possibleOppsMove, "O", testBoard);

        //Since this method is a void, as human, check if everything is correct.
        //Which it is since we have already tried this method before.
        //Also, the winning condition has also been tried before.
        Board.printBoard(testBoard);



    }

    @Test
    void testPlaceStone() {
    }

    @Test
    void sizeBoard() {
        var board = new Board(15);
        assertEquals(15, board.sizeBoard());
    }

    @Test
    void isThereMoves() {

        String [][] fullB = new String[][]{
                {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X" },
                {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X" },
                {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X" },
                {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X" },
                {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X" },
                {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X" },
                {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X" },
                {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X" },
                {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X" },
                {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X" },
                {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X" },
                {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X" },
                {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X" },
                {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X" },
                {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X" },
        };

        assertFalse(Board.isThereMoves(fullB));
        assertTrue(Board.isThereMoves(testBoard));
    }

    @Test
    void isMovePossible() {
        testBoard [0][0] = "X";
        int [] tooLarge = new int[]{16,126};
        int [] occupied = new int []{0,0};
        int [] free = new int []{1,1};
        assertThrows(IndexOutOfBoundsException.class,
                () -> {
                    Arrays.toString(Board.isMovePossible(tooLarge, testBoard));
                });

        assertThrows(IllegalArgumentException.class,
                () -> {
                    Arrays.toString(Board.isMovePossible(occupied, testBoard));
                });
        assertArrayEquals(free, Board.isMovePossible(free, testBoard));

    }

    @Test
    void testIsMovePossible() {
    }
}